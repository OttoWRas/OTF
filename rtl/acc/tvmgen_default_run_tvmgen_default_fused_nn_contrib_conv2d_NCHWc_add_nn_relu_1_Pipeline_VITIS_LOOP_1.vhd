-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity tvmgen_default_run_tvmgen_default_fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1_Pipeline_VITIS_LOOP_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    mul41 : IN STD_LOGIC_VECTOR (2 downto 0);
    empty : IN STD_LOGIC_VECTOR (12 downto 0);
    global_workspace_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    global_workspace_ce0 : OUT STD_LOGIC;
    global_workspace_we0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    global_workspace_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    global_workspace_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_517_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_517_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_517_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_517_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_517_p_ce : OUT STD_LOGIC;
    grp_fu_525_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_525_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_525_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_525_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_525_p_ce : OUT STD_LOGIC );
end;


architecture behav of tvmgen_default_run_tvmgen_default_fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1_Pipeline_VITIS_LOOP_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv7_70 : STD_LOGIC_VECTOR (6 downto 0) := "1110000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln1033_fu_166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal global_const_workspace_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal global_const_workspace_ce0 : STD_LOGIC;
    signal global_const_workspace_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1033_fu_190_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln1033_reg_381 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln1033_1_fu_204_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln1033_1_reg_387 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_127_reg_402 : STD_LOGIC_VECTOR (9 downto 0);
    signal global_workspace_load_reg_407 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal global_const_workspace_load_reg_412 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln1036_fu_266_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal v_s_reg_422 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal select_ln1037_fu_311_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1037_reg_428 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal zext_ln1036_1_fu_230_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1036_2_fu_241_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1037_fu_342_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ax4_fu_82 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal add_ln1034_fu_347_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_ax4_load : STD_LOGIC_VECTOR (2 downto 0);
    signal ax3_inner_fu_86 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal ap_sig_allocacmp_ax3_inner_load : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten6_fu_90 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal add_ln1033_fu_172_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_indvar_flatten6_load : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln1034_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1033_1_fu_198_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1036_fu_212_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln_fu_216_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln1036_fu_226_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1036_fu_235_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal bitcast_ln1037_fu_270_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_273_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1037_fu_283_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln1037_1_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1037_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1037_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1037_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_126_fu_319_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp4_fu_330_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln1036_fu_326_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1037_fu_336_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component tvmgen_default_run_fadd_32ns_32ns_32_7_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component tvmgen_default_run_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component tvmgen_default_run_tvmgen_default_fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1_Pipeline_VITIS_LOOcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component tvmgen_default_run_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    global_const_workspace_U : component tvmgen_default_run_tvmgen_default_fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1_Pipeline_VITIS_LOOcud
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => global_const_workspace_address0,
        ce0 => global_const_workspace_ce0,
        q0 => global_const_workspace_q0);

    flow_control_loop_pipe_sequential_init_U : component tvmgen_default_run_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ax3_inner_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln1033_fu_166_p2 = ap_const_lv1_0)) then 
                    ax3_inner_fu_86 <= select_ln1033_1_fu_204_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    ax3_inner_fu_86 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    ax4_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                ax4_fu_82 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                ax4_fu_82 <= add_ln1034_fu_347_p2;
            end if; 
        end if;
    end process;

    indvar_flatten6_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln1033_fu_166_p2 = ap_const_lv1_0)) then 
                    indvar_flatten6_fu_90 <= add_ln1033_fu_172_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten6_fu_90 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                global_const_workspace_load_reg_412 <= global_const_workspace_q0;
                global_workspace_load_reg_407 <= global_workspace_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                select_ln1033_1_reg_387 <= select_ln1033_1_fu_204_p3;
                select_ln1033_reg_381 <= select_ln1033_fu_190_p3;
                tmp_127_reg_402 <= empty(12 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                select_ln1037_reg_428 <= select_ln1037_fu_311_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                v_s_reg_422 <= grp_fu_517_p_dout0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln1033_fu_166_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((icmp_ln1033_fu_166_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    add_ln1033_1_fu_198_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_ax3_inner_load) + unsigned(ap_const_lv5_1));
    add_ln1033_fu_172_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten6_load) + unsigned(ap_const_lv7_1));
    add_ln1034_fu_347_p2 <= std_logic_vector(unsigned(select_ln1033_reg_381) + unsigned(ap_const_lv3_1));
    add_ln1036_fu_235_p2 <= std_logic_vector(unsigned(select_ln1033_fu_190_p3) + unsigned(mul41));
    add_ln1037_fu_336_p2 <= std_logic_vector(unsigned(tmp4_fu_330_p3) + unsigned(zext_ln1036_fu_326_p1));
    and_ln1037_fu_305_p2 <= (or_ln1037_fu_299_p2 and grp_fu_525_p_dout0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1_pp0_stage0_iter0)
    begin
        if ((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln1033_fu_166_p2)
    begin
        if (((icmp_ln1033_fu_166_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_ax3_inner_load_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, ax3_inner_fu_86)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_ax3_inner_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_ax3_inner_load <= ax3_inner_fu_86;
        end if; 
    end process;


    ap_sig_allocacmp_ax4_load_assign_proc : process(ap_CS_fsm_state1, ax4_fu_82, ap_loop_init)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_ax4_load <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_ax4_load <= ax4_fu_82;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten6_load_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, indvar_flatten6_fu_90)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten6_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_indvar_flatten6_load <= indvar_flatten6_fu_90;
        end if; 
    end process;

    bitcast_ln1036_fu_266_p1 <= global_workspace_load_reg_407;
    bitcast_ln1037_fu_270_p1 <= v_s_reg_422;
    global_const_workspace_address0 <= zext_ln1036_2_fu_241_p1(3 - 1 downto 0);

    global_const_workspace_ce0_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            global_const_workspace_ce0 <= ap_const_logic_1;
        else 
            global_const_workspace_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    global_workspace_address0_assign_proc : process(ap_CS_fsm_state1, icmp_ln1033_fu_166_p2, ap_CS_fsm_state12, zext_ln1036_1_fu_230_p1, zext_ln1037_fu_342_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            global_workspace_address0 <= zext_ln1037_fu_342_p1(13 - 1 downto 0);
        elsif (((icmp_ln1033_fu_166_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            global_workspace_address0 <= zext_ln1036_1_fu_230_p1(13 - 1 downto 0);
        else 
            global_workspace_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    global_workspace_ce0_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln1033_fu_166_p2, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((icmp_ln1033_fu_166_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            global_workspace_ce0 <= ap_const_logic_1;
        else 
            global_workspace_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    global_workspace_d0 <= select_ln1037_reg_428;

    global_workspace_we0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            global_workspace_we0 <= ap_const_lv4_F;
        else 
            global_workspace_we0 <= ap_const_lv4_0;
        end if; 
    end process;

    grp_fu_517_p_ce <= ap_const_logic_1;
    grp_fu_517_p_din0 <= bitcast_ln1036_fu_266_p1;
    grp_fu_517_p_din1 <= global_const_workspace_load_reg_412;
    grp_fu_517_p_opcode <= ap_const_lv2_0;
    grp_fu_525_p_ce <= ap_const_logic_1;
    grp_fu_525_p_din0 <= v_s_reg_422;
    grp_fu_525_p_din1 <= ap_const_lv32_0;
    grp_fu_525_p_opcode <= ap_const_lv5_2;
    icmp_ln1033_fu_166_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten6_load = ap_const_lv7_70) else "0";
    icmp_ln1034_fu_184_p2 <= "1" when (ap_sig_allocacmp_ax4_load = ap_const_lv3_4) else "0";
    icmp_ln1037_1_fu_293_p2 <= "1" when (trunc_ln1037_fu_283_p1 = ap_const_lv23_0) else "0";
    icmp_ln1037_fu_287_p2 <= "0" when (tmp_fu_273_p4 = ap_const_lv8_FF) else "1";
    or_ln1037_fu_299_p2 <= (icmp_ln1037_fu_287_p2 or icmp_ln1037_1_fu_293_p2);
    or_ln_fu_216_p4 <= ((ap_const_lv4_9 & select_ln1033_1_fu_204_p3) & trunc_ln1036_fu_212_p1);
    select_ln1033_1_fu_204_p3 <= 
        add_ln1033_1_fu_198_p2 when (icmp_ln1034_fu_184_p2(0) = '1') else 
        ap_sig_allocacmp_ax3_inner_load;
    select_ln1033_fu_190_p3 <= 
        ap_const_lv3_0 when (icmp_ln1034_fu_184_p2(0) = '1') else 
        ap_sig_allocacmp_ax4_load;
    select_ln1037_fu_311_p3 <= 
        bitcast_ln1037_fu_270_p1 when (and_ln1037_fu_305_p2(0) = '1') else 
        ap_const_lv32_0;
        sext_ln1036_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln_fu_216_p4),13));

    tmp4_fu_330_p3 <= (tmp_127_reg_402 & select_ln1033_reg_381);
    tmp_126_fu_319_p3 <= (select_ln1033_1_reg_387 & ap_const_lv2_0);
    tmp_fu_273_p4 <= bitcast_ln1037_fu_270_p1(30 downto 23);
    trunc_ln1036_fu_212_p1 <= select_ln1033_fu_190_p3(2 - 1 downto 0);
    trunc_ln1037_fu_283_p1 <= bitcast_ln1037_fu_270_p1(23 - 1 downto 0);
    zext_ln1036_1_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1036_fu_226_p1),64));
    zext_ln1036_2_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1036_fu_235_p2),64));
    zext_ln1036_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_126_fu_319_p3),13));
    zext_ln1037_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1037_fu_336_p2),64));
end behav;
