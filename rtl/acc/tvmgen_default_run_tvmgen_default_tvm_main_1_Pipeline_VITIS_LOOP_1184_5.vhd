-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity tvmgen_default_run_tvmgen_default_tvm_main_1_Pipeline_VITIS_LOOP_1184_5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    zext_ln1174 : IN STD_LOGIC_VECTOR (0 downto 0);
    zext_ln1184 : IN STD_LOGIC_VECTOR (2 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    global_workspace_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    global_workspace_ce0 : OUT STD_LOGIC;
    global_workspace_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_210_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_210_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_210_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_210_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_210_p_ce : OUT STD_LOGIC );
end;


architecture behav of tvmgen_default_run_tvmgen_default_tvm_main_1_Pipeline_VITIS_LOOP_1184_5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1184_fu_125_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal global_const_workspace_fused_nn_contrib_dense_pack_constant_let_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal global_const_workspace_fused_nn_contrib_dense_pack_constant_let_ce0 : STD_LOGIC;
    signal global_const_workspace_fused_nn_contrib_dense_pack_constant_let_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln1186_fu_153_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1186_reg_195 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1186_reg_195_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1186_reg_195_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1186_reg_195_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1186_reg_195_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1186_reg_195_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1186_reg_195_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1186_reg_195_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1186_reg_195_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal global_workspace_load_reg_210 : STD_LOGIC_VECTOR (31 downto 0);
    signal global_const_workspace_fused_nn_contrib_dense_pack_constant_let_load_reg_215 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln1186_fu_176_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add44_i_reg_225 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1186_2_fu_166_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ax1_inner_inner_fu_50 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal add_ln1184_fu_131_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_ax1_inner_inner_1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln1174_cast_fu_113_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1185_1_fu_137_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln1185_fu_143_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln1184_cast_fu_109_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln1185_fu_147_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln1186_1_fu_158_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component tvmgen_default_run_fadd_32ns_32ns_32_7_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component tvmgen_default_run_tvmgen_default_tvm_main_1_Pipeline_VITIS_LOOP_1184_5_global_const_workspace_fg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component tvmgen_default_run_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    global_const_workspace_fused_nn_contrib_dense_pack_constant_let_U : component tvmgen_default_run_tvmgen_default_tvm_main_1_Pipeline_VITIS_LOOP_1184_5_global_const_workspace_fg8j
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => global_const_workspace_fused_nn_contrib_dense_pack_constant_let_address0,
        ce0 => global_const_workspace_fused_nn_contrib_dense_pack_constant_let_ce0,
        q0 => global_const_workspace_fused_nn_contrib_dense_pack_constant_let_q0);

    flow_control_loop_pipe_sequential_init_U : component tvmgen_default_run_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ax1_inner_inner_fu_50_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln1184_fu_125_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    ax1_inner_inner_fu_50 <= add_ln1184_fu_131_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    ax1_inner_inner_fu_50 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add44_i_reg_225 <= grp_fu_210_p_dout0;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                    zext_ln1186_reg_195_pp0_iter2_reg(3 downto 0) <= zext_ln1186_reg_195_pp0_iter1_reg(3 downto 0);
                    zext_ln1186_reg_195_pp0_iter3_reg(3 downto 0) <= zext_ln1186_reg_195_pp0_iter2_reg(3 downto 0);
                    zext_ln1186_reg_195_pp0_iter4_reg(3 downto 0) <= zext_ln1186_reg_195_pp0_iter3_reg(3 downto 0);
                    zext_ln1186_reg_195_pp0_iter5_reg(3 downto 0) <= zext_ln1186_reg_195_pp0_iter4_reg(3 downto 0);
                    zext_ln1186_reg_195_pp0_iter6_reg(3 downto 0) <= zext_ln1186_reg_195_pp0_iter5_reg(3 downto 0);
                    zext_ln1186_reg_195_pp0_iter7_reg(3 downto 0) <= zext_ln1186_reg_195_pp0_iter6_reg(3 downto 0);
                    zext_ln1186_reg_195_pp0_iter8_reg(3 downto 0) <= zext_ln1186_reg_195_pp0_iter7_reg(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                global_const_workspace_fused_nn_contrib_dense_pack_constant_let_load_reg_215 <= global_const_workspace_fused_nn_contrib_dense_pack_constant_let_q0;
                global_workspace_load_reg_210 <= global_workspace_q0;
                    zext_ln1186_reg_195(3 downto 0) <= zext_ln1186_fu_153_p1(3 downto 0);
                    zext_ln1186_reg_195_pp0_iter1_reg(3 downto 0) <= zext_ln1186_reg_195(3 downto 0);
            end if;
        end if;
    end process;
    zext_ln1186_reg_195(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln1186_reg_195_pp0_iter1_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln1186_reg_195_pp0_iter2_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln1186_reg_195_pp0_iter3_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln1186_reg_195_pp0_iter4_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln1186_reg_195_pp0_iter5_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln1186_reg_195_pp0_iter6_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln1186_reg_195_pp0_iter7_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln1186_reg_195_pp0_iter8_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1184_fu_131_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_ax1_inner_inner_1) + unsigned(ap_const_lv3_1));
    add_ln1185_1_fu_137_p2 <= std_logic_vector(unsigned(zext_ln1174_cast_fu_113_p1) + unsigned(ap_sig_allocacmp_ax1_inner_inner_1));
    add_ln1185_fu_147_p2 <= std_logic_vector(unsigned(zext_ln1185_fu_143_p1) + unsigned(zext_ln1184_cast_fu_109_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln1184_fu_125_p2)
    begin
        if (((icmp_ln1184_fu_125_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter8_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_ax1_inner_inner_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ax1_inner_inner_fu_50, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_ax1_inner_inner_1 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_ax1_inner_inner_1 <= ax1_inner_inner_fu_50;
        end if; 
    end process;

    bitcast_ln1186_fu_176_p1 <= global_workspace_load_reg_210;
    global_const_workspace_fused_nn_contrib_dense_pack_constant_let_address0 <= zext_ln1186_fu_153_p1(4 - 1 downto 0);

    global_const_workspace_fused_nn_contrib_dense_pack_constant_let_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            global_const_workspace_fused_nn_contrib_dense_pack_constant_let_ce0 <= ap_const_logic_1;
        else 
            global_const_workspace_fused_nn_contrib_dense_pack_constant_let_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    global_workspace_address0 <= zext_ln1186_2_fu_166_p1(13 - 1 downto 0);

    global_workspace_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            global_workspace_ce0 <= ap_const_logic_1;
        else 
            global_workspace_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_210_p_ce <= ap_const_logic_1;
    grp_fu_210_p_din0 <= bitcast_ln1186_fu_176_p1;
    grp_fu_210_p_din1 <= global_const_workspace_fused_nn_contrib_dense_pack_constant_let_load_reg_215;
    grp_fu_210_p_opcode <= ap_const_lv2_0;
    icmp_ln1184_fu_125_p2 <= "1" when (ap_sig_allocacmp_ax1_inner_inner_1 = ap_const_lv3_5) else "0";
    output_r_address0 <= zext_ln1186_reg_195_pp0_iter8_reg(12 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= add44_i_reg_225;

    output_r_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln1174_cast_fu_113_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln1174),3));
    zext_ln1184_cast_fu_109_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln1184),4));
    zext_ln1185_fu_143_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1185_1_fu_137_p2),4));
    zext_ln1186_1_fu_158_p3 <= (ap_const_lv6_20 & ap_sig_allocacmp_ax1_inner_inner_1);
    zext_ln1186_2_fu_166_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln1186_1_fu_158_p3),64));
    zext_ln1186_fu_153_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1185_fu_147_p2),64));
end behav;
