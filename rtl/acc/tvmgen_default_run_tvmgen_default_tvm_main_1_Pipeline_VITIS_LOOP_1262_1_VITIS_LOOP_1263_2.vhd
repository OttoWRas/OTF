-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity tvmgen_default_run_tvmgen_default_tvm_main_1_Pipeline_VITIS_LOOP_1262_1_VITIS_LOOP_1263_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    global_workspace_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    global_workspace_ce0 : OUT STD_LOGIC;
    global_workspace_we0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    global_workspace_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of tvmgen_default_run_tvmgen_default_tvm_main_1_Pipeline_VITIS_LOOP_1262_1_VITIS_LOOP_1263_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv7_46 : STD_LOGIC_VECTOR (6 downto 0) := "1000110";
    constant ap_const_lv6_1E : STD_LOGIC_VECTOR (5 downto 0) := "011110";
    constant ap_const_lv14_2200 : STD_LOGIC_VECTOR (13 downto 0) := "10001000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1262_fu_127_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln1263_fu_142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1263_reg_379 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1262_fu_148_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln1262_reg_384 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln1262_reg_384_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln1265_fu_166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1265_reg_390 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1265_reg_390_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1265_reg_390_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1270_fu_172_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1270_reg_395 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1270_reg_395_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln1262_1_fu_201_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln1262_1_reg_400 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_fu_208_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_reg_405 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_fu_252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_410 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_410_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1266_1_fu_271_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1266_1_reg_415 : STD_LOGIC_VECTOR (10 downto 0);
    signal notrhs_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_reg_420 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1265_1_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1265_1_reg_425 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1270_1_reg_435 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln1270_1_reg_435_pp0_iter3_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln1265_fu_338_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1265_reg_440 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1266_1_fu_292_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln1270_1_fu_349_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ax3_fu_72 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal add_ln1263_fu_176_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_ax3_load : STD_LOGIC_VECTOR (5 downto 0);
    signal ax0_ax1_fused_ax2_fused_fu_76 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal indvar_flatten_fu_80 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal add_ln1262_fu_133_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_fu_156_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln1262_1_fu_195_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_fu_212_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl1_fu_224_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_cast_fu_220_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast_fu_232_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_242_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1263_fu_258_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln1266_fu_261_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln1266_fu_267_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_72_fu_236_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln_fu_296_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1270_fu_304_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln1270_fu_308_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal and_ln1265_2_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1265_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1265_1_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1270_fu_346_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component tvmgen_default_run_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component tvmgen_default_run_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ax0_ax1_fused_ax2_fused_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    ax0_ax1_fused_ax2_fused_fu_76 <= ap_const_lv6_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    ax0_ax1_fused_ax2_fused_fu_76 <= select_ln1262_1_fu_201_p3;
                end if;
            end if; 
        end if;
    end process;

    ax3_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln1262_fu_127_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    ax3_fu_72 <= add_ln1263_fu_176_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    ax3_fu_72 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln1262_fu_127_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_80 <= add_ln1262_fu_133_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_80 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln1266_1_reg_415 <= add_ln1266_1_fu_271_p2;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                empty_reg_405 <= empty_fu_208_p1;
                icmp_ln1263_reg_379 <= icmp_ln1263_fu_142_p2;
                icmp_ln1265_reg_390 <= icmp_ln1265_fu_166_p2;
                icmp_ln1265_reg_390_pp0_iter1_reg <= icmp_ln1265_reg_390;
                icmp_reg_410 <= icmp_fu_252_p2;
                select_ln1262_1_reg_400 <= select_ln1262_1_fu_201_p3;
                select_ln1262_reg_384 <= select_ln1262_fu_148_p3;
                select_ln1262_reg_384_pp0_iter1_reg <= select_ln1262_reg_384;
                trunc_ln1270_reg_395 <= trunc_ln1270_fu_172_p1;
                trunc_ln1270_reg_395_pp0_iter1_reg <= trunc_ln1270_reg_395;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                icmp_ln1265_1_reg_425 <= icmp_ln1265_1_fu_287_p2;
                icmp_ln1265_reg_390_pp0_iter2_reg <= icmp_ln1265_reg_390_pp0_iter1_reg;
                icmp_reg_410_pp0_iter2_reg <= icmp_reg_410;
                notrhs_reg_420 <= notrhs_fu_282_p2;
                select_ln1265_reg_440 <= select_ln1265_fu_338_p3;
                trunc_ln1270_1_reg_435 <= add_ln1270_fu_308_p2(13 downto 2);
                trunc_ln1270_1_reg_435_pp0_iter3_reg <= trunc_ln1270_1_reg_435;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1262_1_fu_195_p2 <= std_logic_vector(unsigned(ax0_ax1_fused_ax2_fused_fu_76) + unsigned(ap_const_lv6_1));
    add_ln1262_fu_133_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv11_1));
    add_ln1263_fu_176_p2 <= std_logic_vector(unsigned(select_ln1262_fu_148_p3) + unsigned(ap_const_lv6_1));
    add_ln1266_1_fu_271_p2 <= std_logic_vector(signed(sext_ln1266_fu_267_p1) + signed(empty_72_fu_236_p2));
    add_ln1266_fu_261_p2 <= std_logic_vector(unsigned(zext_ln1263_fu_258_p1) + unsigned(ap_const_lv7_46));
    add_ln1270_fu_308_p2 <= std_logic_vector(unsigned(zext_ln1270_fu_304_p1) + unsigned(ap_const_lv14_2200));
    and_ln1265_1_fu_332_p2 <= (and_ln1265_fu_324_p2 and and_ln1265_2_fu_328_p2);
    and_ln1265_2_fu_328_p2 <= (icmp_ln1265_reg_390_pp0_iter2_reg and icmp_ln1265_1_reg_425);
    and_ln1265_fu_324_p2 <= (notrhs_reg_420 and icmp_reg_410_pp0_iter2_reg);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln1262_fu_127_p2)
    begin
        if (((icmp_ln1262_fu_127_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_ax3_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ax3_fu_72, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_ax3_load <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_ax3_load <= ax3_fu_72;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_80)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_80;
        end if; 
    end process;

    empty_72_fu_236_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_220_p1) - unsigned(p_shl1_cast_fu_232_p1));
    empty_fu_208_p1 <= select_ln1262_1_fu_201_p3(5 - 1 downto 0);
    global_workspace_address0 <= zext_ln1270_1_fu_349_p1(13 - 1 downto 0);

    global_workspace_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            global_workspace_ce0 <= ap_const_logic_1;
        else 
            global_workspace_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    global_workspace_d0 <= select_ln1265_reg_440;

    global_workspace_we0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            global_workspace_we0 <= ap_const_lv4_F;
        else 
            global_workspace_we0 <= ap_const_lv4_0;
        end if; 
    end process;

    icmp_fu_252_p2 <= "0" when (tmp_fu_242_p4 = ap_const_lv5_0) else "1";
    icmp_ln1262_fu_127_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv11_400) else "0";
    icmp_ln1263_fu_142_p2 <= "1" when (ap_sig_allocacmp_ax3_load = ap_const_lv6_20) else "0";
    icmp_ln1265_1_fu_287_p2 <= "1" when (unsigned(select_ln1262_reg_384_pp0_iter1_reg) < unsigned(ap_const_lv6_1E)) else "0";
    icmp_ln1265_fu_166_p2 <= "0" when (tmp_1_fu_156_p4 = ap_const_lv5_0) else "1";
    input_r_address0 <= sext_ln1266_1_fu_292_p1(12 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    notrhs_fu_282_p2 <= "1" when (unsigned(select_ln1262_1_reg_400) < unsigned(ap_const_lv6_1E)) else "0";
    p_shl1_cast_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_224_p3),11));
    p_shl1_fu_224_p3 <= (empty_fu_208_p1 & ap_const_lv2_0);
    p_shl_cast_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_212_p3),11));
    p_shl_fu_212_p3 <= (empty_fu_208_p1 & ap_const_lv5_0);
    select_ln1262_1_fu_201_p3 <= 
        add_ln1262_1_fu_195_p2 when (icmp_ln1263_reg_379(0) = '1') else 
        ax0_ax1_fused_ax2_fused_fu_76;
    select_ln1262_fu_148_p3 <= 
        ap_const_lv6_0 when (icmp_ln1263_fu_142_p2(0) = '1') else 
        ap_sig_allocacmp_ax3_load;
    select_ln1265_fu_338_p3 <= 
        input_r_q0 when (and_ln1265_1_fu_332_p2(0) = '1') else 
        ap_const_lv32_0;
        sext_ln1266_1_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1266_1_reg_415),64));

        sext_ln1266_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1266_fu_261_p2),11));

        sext_ln1270_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1270_1_reg_435_pp0_iter3_reg),13));

    shl_ln_fu_296_p4 <= ((empty_reg_405 & trunc_ln1270_reg_395_pp0_iter1_reg) & ap_const_lv2_0);
    tmp_1_fu_156_p4 <= select_ln1262_fu_148_p3(5 downto 1);
    tmp_fu_242_p4 <= select_ln1262_1_fu_201_p3(5 downto 1);
    trunc_ln1270_fu_172_p1 <= select_ln1262_fu_148_p3(5 - 1 downto 0);
    zext_ln1263_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1262_reg_384),7));
    zext_ln1270_1_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1270_fu_346_p1),64));
    zext_ln1270_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_296_p4),14));
end behav;
