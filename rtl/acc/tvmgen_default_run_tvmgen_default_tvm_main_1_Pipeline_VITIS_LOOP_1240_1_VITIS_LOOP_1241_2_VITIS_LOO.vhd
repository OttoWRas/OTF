-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity tvmgen_default_run_tvmgen_default_tvm_main_1_Pipeline_VITIS_LOOP_1240_1_VITIS_LOOP_1241_2_VITIS_LOO is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    global_workspace_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    global_workspace_ce0 : OUT STD_LOGIC;
    global_workspace_we0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    global_workspace_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    global_workspace_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of tvmgen_default_run_tvmgen_default_tvm_main_1_Pipeline_VITIS_LOOP_1240_1_VITIS_LOOP_1241_2_VITIS_LOO is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv12_A20 : STD_LOGIC_VECTOR (11 downto 0) := "101000100000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv8_48 : STD_LOGIC_VECTOR (7 downto 0) := "01001000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_12 : STD_LOGIC_VECTOR (5 downto 0) := "010010";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv13_72 : STD_LOGIC_VECTOR (12 downto 0) := "0000001110010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv11_310 : STD_LOGIC_VECTOR (10 downto 0) := "01100010000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv15_6020 : STD_LOGIC_VECTOR (14 downto 0) := "110000000100000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv15_3100 : STD_LOGIC_VECTOR (14 downto 0) := "011000100000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal icmp_ln1240_reg_639 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage2 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln1240_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1240_reg_639_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1240_reg_639_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1240_reg_639_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten13_load_reg_643 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1241_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1241_reg_648 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1241_reg_648_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1241_reg_648_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1241_reg_648_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1240_1_fu_208_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln1240_1_reg_656 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln1240_1_reg_656_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln1240_1_reg_656_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln1240_1_reg_656_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_reg_664 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal mul15_i_fu_271_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul15_i_reg_669 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal grp_fu_216_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal cse_var_2_reg_674 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_fu_277_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_reg_679 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp78_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp78_reg_685 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1241_fu_338_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln1241_reg_690 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln1241_1_fu_346_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln1241_1_reg_695 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp82_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp82_reg_701 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1247_fu_419_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1247_reg_706 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln1247_fu_445_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1247_reg_711 : STD_LOGIC_VECTOR (12 downto 0);
    signal lshr_ln2_reg_721 : STD_LOGIC_VECTOR (12 downto 0);
    signal empty_73_fu_592_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_73_reg_726 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal zext_ln1247_fu_497_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln1251_1_fu_600_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ax4_inner_fu_110 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal add_ln1242_fu_552_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ax3_fu_114 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal indvar_flatten13_fu_118 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal select_ln1241_2_fu_237_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_indvar_flatten13_load : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ax0_ax1_fused_ax2_fused_fu_122 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal ap_sig_allocacmp_ax0_ax1_fused_ax2_fused_load : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten26_fu_126 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal add_ln1240_fu_184_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_allocacmp_indvar_flatten26_load : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1240_1_fu_202_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_216_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln1241_1_fu_232_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_fu_252_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_fu_252_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_fu_252_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul15_i_fu_271_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_281_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1242_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1240_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1240_fu_303_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln1240_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1241_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1241_fu_327_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl8_fu_357_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl9_fu_368_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl8_cast_fu_364_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl9_cast_fu_375_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul15_i_cast_fu_354_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul16_i_fu_379_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_5_fu_391_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_fu_403_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_i_fu_385_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_8_fu_423_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_fu_433_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1247_fu_441_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_cast38_fu_399_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_s_fu_456_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln1_fu_474_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln1247_1_fu_481_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal lshr_ln1_fu_487_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_3_fu_467_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_cast39_fu_463_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp9_fu_508_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1251_fu_514_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1251_fu_502_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1251_2_fu_518_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln2_fu_524_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln1251_2_fu_532_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln1251_1_fu_536_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_4_fu_562_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_574_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp6_fu_581_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge5_i_fu_586_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter3_stage1 : STD_LOGIC;
    signal ap_idle_pp0_0to2 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to4 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal mul15_i_fu_271_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_fu_252_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component tvmgen_default_run_urem_6ns_6ns_6_10_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component tvmgen_default_run_mul_6ns_8ns_13_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component tvmgen_default_run_mul_2ns_11ns_11_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (1 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component tvmgen_default_run_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    urem_6ns_6ns_6_10_1_U49 : component tvmgen_default_run_urem_6ns_6ns_6_10_1
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        dout_WIDTH => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_216_p0,
        din1 => ap_const_lv6_12,
        ce => ap_const_logic_1,
        dout => grp_fu_216_p2);

    mul_6ns_8ns_13_1_1_U50 : component tvmgen_default_run_mul_6ns_8ns_13_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 8,
        dout_WIDTH => 13)
    port map (
        din0 => mul_fu_252_p0,
        din1 => mul_fu_252_p1,
        dout => mul_fu_252_p2);

    mul_2ns_11ns_11_1_1_U51 : component tvmgen_default_run_mul_2ns_11ns_11_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 2,
        din1_WIDTH => 11,
        dout_WIDTH => 11)
    port map (
        din0 => mul15_i_fu_271_p0,
        din1 => ap_const_lv11_310,
        dout => mul15_i_fu_271_p2);

    flow_control_loop_pipe_sequential_init_U : component tvmgen_default_run_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage2,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage2)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to2 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to2 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage1))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to2 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage1))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    ax0_ax1_fused_ax2_fused_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln1240_fu_178_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    ax0_ax1_fused_ax2_fused_fu_122 <= select_ln1240_1_fu_208_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    ax0_ax1_fused_ax2_fused_fu_122 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;

    ax3_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                ax3_fu_114 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ax3_fu_114 <= select_ln1241_1_fu_346_p3;
            end if; 
        end if;
    end process;

    ax4_inner_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                ax4_inner_fu_110 <= ap_const_lv3_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ax4_inner_fu_110 <= add_ln1242_fu_552_p2;
            end if; 
        end if;
    end process;

    indvar_flatten13_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                indvar_flatten13_fu_118 <= ap_const_lv8_0;
            elsif (((icmp_ln1240_reg_639 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                indvar_flatten13_fu_118 <= select_ln1241_2_fu_237_p3;
            end if; 
        end if;
    end process;

    indvar_flatten26_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln1240_fu_178_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten26_fu_126 <= add_ln1240_fu_184_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten26_fu_126 <= ap_const_lv12_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln1247_reg_711 <= add_ln1247_fu_445_p2;
                icmp82_reg_701 <= icmp82_fu_413_p2;
                select_ln1241_1_reg_695 <= select_ln1241_1_fu_346_p3;
                select_ln1241_reg_690 <= select_ln1241_fu_338_p3;
                tmp_reg_664 <= mul_fu_252_p2(12 downto 11);
                trunc_ln1247_reg_706 <= trunc_ln1247_fu_419_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                cse_var_2_reg_674 <= grp_fu_216_p2;
                empty_73_reg_726 <= empty_73_fu_592_p3;
                empty_reg_679 <= empty_fu_277_p1;
                icmp78_reg_685 <= icmp78_fu_291_p2;
                icmp_ln1240_reg_639 <= icmp_ln1240_fu_178_p2;
                icmp_ln1240_reg_639_pp0_iter1_reg <= icmp_ln1240_reg_639;
                icmp_ln1240_reg_639_pp0_iter2_reg <= icmp_ln1240_reg_639_pp0_iter1_reg;
                icmp_ln1240_reg_639_pp0_iter3_reg <= icmp_ln1240_reg_639_pp0_iter2_reg;
                icmp_ln1241_reg_648 <= icmp_ln1241_fu_196_p2;
                icmp_ln1241_reg_648_pp0_iter1_reg <= icmp_ln1241_reg_648;
                icmp_ln1241_reg_648_pp0_iter2_reg <= icmp_ln1241_reg_648_pp0_iter1_reg;
                icmp_ln1241_reg_648_pp0_iter3_reg <= icmp_ln1241_reg_648_pp0_iter2_reg;
                indvar_flatten13_load_reg_643 <= ap_sig_allocacmp_indvar_flatten13_load;
                select_ln1240_1_reg_656 <= select_ln1240_1_fu_208_p3;
                select_ln1240_1_reg_656_pp0_iter1_reg <= select_ln1240_1_reg_656;
                select_ln1240_1_reg_656_pp0_iter2_reg <= select_ln1240_1_reg_656_pp0_iter1_reg;
                select_ln1240_1_reg_656_pp0_iter3_reg <= select_ln1240_1_reg_656_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                lshr_ln2_reg_721 <= add_ln1251_1_fu_536_p2(14 downto 2);
                mul15_i_reg_669 <= mul15_i_fu_271_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage2_subdone, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter3_stage1, ap_idle_pp0_0to2, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to4, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to4 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if (((ap_idle_pp0_0to2 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_i_fu_385_p2 <= std_logic_vector(unsigned(mul15_i_cast_fu_354_p1) + unsigned(mul16_i_fu_379_p2));
    add_ln1240_1_fu_202_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_ax0_ax1_fused_ax2_fused_load) + unsigned(ap_const_lv6_1));
    add_ln1240_fu_184_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten26_load) + unsigned(ap_const_lv12_1));
    add_ln1241_1_fu_232_p2 <= std_logic_vector(unsigned(indvar_flatten13_load_reg_643) + unsigned(ap_const_lv8_1));
    add_ln1241_fu_327_p2 <= std_logic_vector(unsigned(select_ln1240_fu_303_p3) + unsigned(ap_const_lv5_1));
    add_ln1242_fu_552_p2 <= std_logic_vector(unsigned(select_ln1241_reg_690) + unsigned(ap_const_lv3_1));
    add_ln1247_1_fu_481_p2 <= std_logic_vector(unsigned(shl_ln1_fu_474_p3) + unsigned(ap_const_lv15_6020));
    add_ln1247_fu_445_p2 <= std_logic_vector(signed(sext_ln1247_fu_441_p1) + signed(p_cast38_fu_399_p1));
    add_ln1251_1_fu_536_p2 <= std_logic_vector(unsigned(zext_ln1251_2_fu_532_p1) + unsigned(ap_const_lv15_3100));
    add_ln1251_2_fu_518_p2 <= std_logic_vector(unsigned(zext_ln1251_fu_514_p1) + unsigned(add_ln1251_fu_502_p2));
    add_ln1251_fu_502_p2 <= std_logic_vector(unsigned(tmp_3_fu_467_p3) + unsigned(p_cast39_fu_463_p1));
    and_ln1240_fu_321_p2 <= (xor_ln1240_fu_310_p2 and icmp_ln1242_fu_315_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, icmp_ln1240_reg_639)
    begin
        if (((icmp_ln1240_reg_639 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter3_stage1_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln1240_reg_639_pp0_iter3_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((icmp_ln1240_reg_639_pp0_iter3_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter3_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter3_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to4_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to4 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to4 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage2;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_ax0_ax1_fused_ax2_fused_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, ap_block_pp0_stage0, ax0_ax1_fused_ax2_fused_fu_122)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_ax0_ax1_fused_ax2_fused_load <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_ax0_ax1_fused_ax2_fused_load <= ax0_ax1_fused_ax2_fused_fu_122;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten13_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, indvar_flatten13_fu_118, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten13_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_indvar_flatten13_load <= indvar_flatten13_fu_118;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten26_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, ap_block_pp0_stage0, indvar_flatten26_fu_126)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten26_load <= ap_const_lv12_0;
        else 
            ap_sig_allocacmp_indvar_flatten26_load <= indvar_flatten26_fu_126;
        end if; 
    end process;

    brmerge5_i_fu_586_p2 <= (tmp6_fu_581_p2 or tmp5_fu_569_p2);
    empty_73_fu_592_p3 <= 
        ap_const_lv32_0 when (brmerge5_i_fu_586_p2(0) = '1') else 
        global_workspace_q0;
    empty_fu_277_p1 <= grp_fu_216_p2(5 - 1 downto 0);

    global_workspace_address0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, zext_ln1247_fu_497_p1, ap_block_pp0_stage2, zext_ln1251_1_fu_600_p1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            global_workspace_address0 <= zext_ln1251_1_fu_600_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            global_workspace_address0 <= zext_ln1247_fu_497_p1(13 - 1 downto 0);
        else 
            global_workspace_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    global_workspace_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            global_workspace_ce0 <= ap_const_logic_1;
        else 
            global_workspace_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    global_workspace_d0 <= empty_73_reg_726;

    global_workspace_we0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            global_workspace_we0 <= ap_const_lv4_F;
        else 
            global_workspace_we0 <= ap_const_lv4_0;
        end if; 
    end process;

    grp_fu_216_p0 <= 
        add_ln1240_1_fu_202_p2 when (icmp_ln1241_fu_196_p2(0) = '1') else 
        ap_sig_allocacmp_ax0_ax1_fused_ax2_fused_load;
    icmp78_fu_291_p2 <= "1" when (tmp_2_fu_281_p4 = ap_const_lv4_0) else "0";
    icmp82_fu_413_p2 <= "1" when (tmp_6_fu_403_p4 = ap_const_lv4_0) else "0";
    icmp_ln1240_fu_178_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten26_load = ap_const_lv12_A20) else "0";
    icmp_ln1241_fu_196_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten13_load = ap_const_lv8_48) else "0";
    icmp_ln1242_fu_315_p2 <= "1" when (ax4_inner_fu_110 = ap_const_lv3_4) else "0";
    lshr_ln1_fu_487_p4 <= add_ln1247_1_fu_481_p2(14 downto 2);
    mul15_i_cast_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul15_i_reg_669),12));
    mul15_i_fu_271_p0 <= mul15_i_fu_271_p00(2 - 1 downto 0);
    mul15_i_fu_271_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_664),11));
    mul16_i_fu_379_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_364_p1) - unsigned(p_shl9_cast_fu_375_p1));
    mul_fu_252_p0 <= mul_fu_252_p00(6 - 1 downto 0);
    mul_fu_252_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1240_1_reg_656_pp0_iter2_reg),13));
    mul_fu_252_p1 <= ap_const_lv13_72(8 - 1 downto 0);
    or_ln1241_fu_333_p2 <= (icmp_ln1241_reg_648_pp0_iter3_reg or and_ln1240_fu_321_p2);
    p_cast38_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_391_p3),13));
    p_cast39_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_456_p3),12));
    p_shl8_cast_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl8_fu_357_p3),12));
    p_shl8_fu_357_p3 <= (empty_reg_679 & ap_const_lv6_0);
    p_shl9_cast_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl9_fu_368_p3),12));
    p_shl9_fu_368_p3 <= (empty_reg_679 & ap_const_lv3_0);
    select_ln1240_1_fu_208_p3 <= 
        add_ln1240_1_fu_202_p2 when (icmp_ln1241_fu_196_p2(0) = '1') else 
        ap_sig_allocacmp_ax0_ax1_fused_ax2_fused_load;
    select_ln1240_fu_303_p3 <= 
        ap_const_lv5_0 when (icmp_ln1241_reg_648_pp0_iter3_reg(0) = '1') else 
        ax3_fu_114;
    select_ln1241_1_fu_346_p3 <= 
        add_ln1241_fu_327_p2 when (and_ln1240_fu_321_p2(0) = '1') else 
        select_ln1240_fu_303_p3;
    select_ln1241_2_fu_237_p3 <= 
        ap_const_lv8_1 when (icmp_ln1241_reg_648(0) = '1') else 
        add_ln1241_1_fu_232_p2;
    select_ln1241_fu_338_p3 <= 
        ap_const_lv3_0 when (or_ln1241_fu_333_p2(0) = '1') else 
        ax4_inner_fu_110;
        sext_ln1247_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_9_fu_433_p3),13));

    shl_ln1_fu_474_p3 <= (add_ln1247_reg_711 & ap_const_lv2_0);
    shl_ln2_fu_524_p3 <= (add_ln1251_2_fu_518_p2 & ap_const_lv2_0);
    tmp5_fu_569_p2 <= (tmp_4_fu_562_p3 or icmp78_reg_685);
    tmp6_fu_581_p2 <= (tmp_7_fu_574_p3 or icmp82_reg_701);
    tmp9_fu_508_p3 <= (select_ln1241_1_reg_695 & trunc_ln1247_reg_706);
    tmp_2_fu_281_p4 <= grp_fu_216_p2(4 downto 1);
    tmp_3_fu_467_p3 <= (select_ln1240_1_reg_656_pp0_iter3_reg & ap_const_lv6_0);
    tmp_4_fu_562_p3 <= cse_var_2_reg_674(4 downto 4);
    tmp_5_fu_391_p3 <= (select_ln1241_1_fu_346_p3 & ap_const_lv2_0);
    tmp_6_fu_403_p4 <= select_ln1241_1_fu_346_p3(4 downto 1);
    tmp_7_fu_574_p3 <= select_ln1241_1_reg_695(4 downto 4);
    tmp_8_fu_423_p4 <= add_i_fu_385_p2(11 downto 2);
    tmp_9_fu_433_p3 <= (tmp_8_fu_423_p4 & trunc_ln1247_fu_419_p1);
    tmp_s_fu_456_p3 <= (select_ln1240_1_reg_656_pp0_iter3_reg & ap_const_lv3_0);
    trunc_ln1247_fu_419_p1 <= select_ln1241_fu_338_p3(2 - 1 downto 0);
    xor_ln1240_fu_310_p2 <= (icmp_ln1241_reg_648_pp0_iter3_reg xor ap_const_lv1_1);
    zext_ln1247_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1_fu_487_p4),64));
    zext_ln1251_1_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln2_reg_721),64));
    zext_ln1251_2_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln2_fu_524_p3),15));
    zext_ln1251_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp9_fu_508_p3),12));
end behav;
